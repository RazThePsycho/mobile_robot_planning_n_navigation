<?xml version="1.0"?>
<!-- Get from demo_husky.launch -->
<launch>
  <arg name="navigation"   default="true"/>
  <arg name="localization" default="false"/>
  <arg name="icp_odometry" default="false"/>
  <arg name="rtabmap_viz"  default="false"/>
  <arg name="camera"       default="true"/>
  <arg name="lidar2d"      default="false"/>
  <arg name="lidar3d"      default="true"/>
  <arg name="lidar3d_ray_tracing" default="true"/>
  <arg name="slam2d"       default="false"/>
  <arg name="depth_from_lidar" default="true"/>

  <arg     if="$(arg lidar3d)" name="cell_size" default="0.3"/>
  <arg unless="$(arg lidar3d)" name="cell_size" default="0.05"/>

  <arg if="$(eval not lidar2d and not lidar3d)" name="lidar_args" default=""/>

  <arg if="$(arg lidar2d)" name="lidar_args" default="
      --Reg/Strategy 1
      --RGBD/NeighborLinkRefining true
      --Grid/CellSize $(arg cell_size)
      --Icp/PointToPlaneRadius 0
      --Icp/MaxTranslation 1"/>

  <arg if="$(arg lidar3d)" name="lidar_args" default="
      --Reg/Strategy 1
      --RGBD/NeighborLinkRefining false
      --ICP/PM true
      --Icp/PMOutlierRatio 0.7
      --Icp/VoxelSize $(arg cell_size)
      --Icp/MaxCorrespondenceDistance 1
      --Icp/PointToPlaneGroundNormalsUp 0.9
      --Icp/Iterations 10
      --Icp/Epsilon 0.001
      --OdomF2M/ScanSubtractRadius $(arg cell_size)
      --OdomF2M/ScanMaxSize 15000
      --Grid/ClusterRadius 1
      --Grid/RangeMax 20
      --Grid/RayTracing $(arg lidar3d_ray_tracing)
      --Grid/CellSize $(arg cell_size)
      --Icp/PointToPlaneRadius 0
      --Icp/PointToPlaneNormalK 10
      --Icp/MaxTranslation 1"/>
  <!-- Grid/RangeMin 0 -->

  <!--- Run rtabmap -->
  <!-- <remap from="odometry/filtered/local" to="rtabmap/odom2" /> -->
  
  <include file="$(find bachelor)/roslaunch/rtabmap.launch">
    <arg name="rtabmap_viz"      value="$(arg rtabmap_viz)" />
    <arg name="use_sim_time" default="true"/>
    <arg     if="$(arg localization)" name="args" value="--Reg/Force3DoF $(arg slam2d) $(arg lidar_args)" />
    <arg unless="$(arg localization)" name="args" value="--Reg/Force3DoF $(arg slam2d) $(arg lidar_args) -d" /> <!-- create new map -->
    <arg name="localization"    value="$(arg localization)" />
    <arg name="visual_odometry" value="false" />
    <arg name="approx_sync"     value="$(eval camera or not icp_odometry)" />

    <arg name="imu_topic"       value="/robot/imu/data" />
    <arg name="gps_topic"       value="/robot/gps/fix"/>
    <arg unless="$(arg icp_odometry)" name="odom_topic" value="/robot/odometry/filtered/local" />
    <!-- <arg unless="$(arg icp_odometry)" name="odom_topic" value="/robot/odometry/filtered" /> -->

    <arg name="frame_id"        value="robot_base_footprint" />
    <arg name="map_frame_id"        value="world" />
    <!-- <arg name="odom_frame_id"        value="world" /> -->

    <arg name="wait_for_transform" value="1"/>

    <arg name="publish_tf_odom"        value="false"/>
    <arg name="publish_tf_map"         value="true"/>

    <!-- 2D LiDAR -->
    <arg name="subscribe_scan"  value="$(arg lidar2d)" />
    <arg     if="$(arg lidar2d)" name="scan_topic"  value="/robot/front_laser/scan" />
    <arg unless="$(arg lidar2d)" name="scan_topic"  value="/scan_not_used" />

    <!-- 3D LiDAR -->
    <arg name="subscribe_scan_cloud"  value="$(arg lidar3d)" />
    <arg     if="$(arg lidar3d)" name="scan_cloud_topic" value="/robot/lidar_3d/points" />
    <arg unless="$(arg lidar3d)" name="scan_cloud_topic" value="/scan_cloud_not_used" />

    <!-- If camera is used -->
    <arg name="depth"             value="$(eval camera and not depth_from_lidar)" />
    <arg name="subscribe_rgb"     value="$(eval camera)" />
    <arg name="rgbd_sync"         value="$(eval camera and not depth_from_lidar)" />
    <arg name="rgb_topic"         value="/robot/robot_front_ptz_camera/image_raw" />
    <arg name="camera_info_topic" value="/robot/robot_front_ptz_camera/camera_info" />
    <arg name="depth_topic"       value="/depth_topic_not_used" />
    <arg name="approx_rgbd_sync"  value="false" />

    <!-- If depth generated from lidar projection (in case we have only a single RGB camera with a 3D lidar) -->
    <arg name="gen_depth"                  value="$(arg depth_from_lidar)" />
    <arg name="gen_depth_decimation"       value="4" />
    <arg name="gen_depth_fill_holes_size"  value="3" />
    <arg name="gen_depth_fill_iterations"  value="1" />
    <arg name="gen_depth_fill_holes_error" value="0.3" />

    <!-- If icp_odometry is used -->
    <arg if="$(arg icp_odometry)" name="icp_odometry" value="true" />
    <arg if="$(arg icp_odometry)" name="odom_guess_frame_id" value="robot_odom" />
    <arg if="$(arg icp_odometry)" name="vo_frame_id" value="icp_odom" />
    <arg unless="$(arg slam2d)"   name="wait_imu_to_init" value="true" />
    <arg if="$(arg lidar3d)"      name="odom_args" value="--Icp/CorrespondenceRatio 0.01"/>
  </include>

  <!--- Run Move Base -->
  <!-- <include if="$(arg navigation)" file="$(find bachelor)/roslaunch/move_base.launch"/> -->

</launch>
